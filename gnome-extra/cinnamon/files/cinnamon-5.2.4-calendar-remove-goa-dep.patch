From 62276d6fde43b3ad2cc8f3f91f10d4452dafc510 Mon Sep 17 00:00:00 2001
From: Michael Webster <miketwebster@gmail.com>
Date: Tue, 7 Dec 2021 13:28:20 -0500
Subject: [PATCH] calendar: Remove using GOA for calendar source discovery.

It doesn't account for the existence of non-goa calendars such as
locally created ones and those explorted from Thunderbird using an
extension.

New behavior consists of:
- Applet popup is opened, a calendar update is requested, which will
  launch cinnamon's calendar service.
- Once the service has fully started, the applet will receive a state
  signal - whether or not there are any calendars to display.
- If there are no calendars, the service exits immediately (typically
  around 1s or so. The applet will hide the event view.
- If there are calendars, the service is held and serves the events
  request like normal.
- The service exits after 20s of idleness.
---
 calendar-server/cinnamon-calendar-server.in   |  2 +-
 calendar-server/cinnamon-calendar-server.py   | 92 ++++++++++++++++---
 .../applets/calendar@cinnamon.org/applet.js   |  1 -
 .../applets/calendar@cinnamon.org/calendar.js |  5 +-
 .../calendar@cinnamon.org/eventView.js        | 76 ++++++++-------
 src/org.cinnamon.CalendarServer.xml           |  6 +-
 6 files changed, 122 insertions(+), 60 deletions(-)

diff --git a/calendar-server/cinnamon-calendar-server.in b/calendar-server/cinnamon-calendar-server.in
index fc41bec087..ed2180f4b5 100755
--- a/calendar-server/cinnamon-calendar-server.in
+++ b/calendar-server/cinnamon-calendar-server.in
@@ -3,4 +3,4 @@
 export GI_TYPELIB_PATH="@PKGLIBDIR@:@MUFFINLIBDIR@"
 export LD_LIBRARY_PATH="@PKGLIBDIR@:@MUFFINLIBDIR@"
 
-exec /usr/libexec/cinnamon/cinnamon-calendar-server.py
\ No newline at end of file
+exec /usr/libexec/cinnamon/cinnamon-calendar-server.py $@
\ No newline at end of file
diff --git a/calendar-server/cinnamon-calendar-server.py b/calendar-server/cinnamon-calendar-server.py
index a142e4648d..a58183af17 100755
--- a/calendar-server/cinnamon-calendar-server.py
+++ b/calendar-server/cinnamon-calendar-server.py
@@ -22,13 +22,23 @@
 BUS_NAME = "org.cinnamon.CalendarServer"
 BUS_PATH = "/org/cinnamon/CalendarServer"
 
-class CalendarInfo():
+STATUS_UNKNOWN = 0
+STATUS_NO_CALENDARS = 1
+STATUS_HAS_CALENDARS = 2
+
+class CalendarInfo(GObject.Object):
+    __gsignals__ = {
+        "color-changed": (GObject.SignalFlags.RUN_LAST, None, ()),
+    }
     def __init__(self, source, client):
+        super(CalendarInfo, self).__init__()
         # print(source, client)
         self.source = source
         self.client = client
 
-        self.color = source.get_extension(EDataServer.SOURCE_EXTENSION_CALENDAR).get_color()
+        self.extension = source.get_extension(EDataServer.SOURCE_EXTENSION_CALENDAR)
+        self.color = self.extension.get_color()
+        self.color_prop_listener_id = self.extension.connect("notify::color", self.ext_color_prop_changed)
 
         self.start = None
         self.end = None
@@ -38,6 +48,11 @@ def __init__(self, source, client):
         self.events = []
 
     def destroy(self):
+        self.extension.disconnect(self.color_prop_listener_id)
+        self.extension = None
+
+        self.disconnect(self.owner_color_signal_id)
+
         if self.view_cancellable != None:
             self.view_cancellable.cancel()
 
@@ -45,22 +60,27 @@ def destroy(self):
             self.view.stop()
         self.view = None
 
+    def ext_color_prop_changed(self, extension, pspect, data=None):
+        self.color = self.extension.get_color()
+        self.emit("color-changed")
+
 class Event():
     def __init__(self, uid, color, summary, all_day, start_timet, end_timet, mod_timet):
         self.__dict__.update(locals())
 
 class CalendarServer(Gio.Application):
-    def __init__(self):
+    def __init__(self, hold=False):
         Gio.Application.__init__(self,
                                  application_id=BUS_NAME,
                                  inactivity_timeout=20000,
                                  flags=Gio.ApplicationFlags.REPLACE |
                                        Gio.ApplicationFlags.ALLOW_REPLACEMENT |
                                        Gio.ApplicationFlags.IS_SERVICE)
+        self._hold = hold
         self.bus_connection = None
         self.interface = None
         self.registry = None
-        self.registery_watcher = None
+        self.registry_watcher = None
         self.client_appeared_id = 0
         self.client_disappeared_id = 0
 
@@ -99,9 +119,7 @@ def update_timezone(self):
     def do_startup(self):
         Gio.Application.do_startup(self)
 
-        # This makes the inactivity timeout work. Otherwise timeout is fixed at 10s after startup.
         self.hold()
-        self.release()
 
         EDataServer.SourceRegistry.new(None, self.got_registry_callback)
 
@@ -115,6 +133,8 @@ def got_registry_callback(self, source, res):
             print(e)
             self.quit()
 
+        self.update_status()
+
         self.registry_watcher = EDataServer.SourceRegistryWatcher.new(self.registry, None)
 
         self.client_appeared_id = self.registry_watcher.connect("appeared", self.source_appeared)
@@ -125,20 +145,28 @@ def got_registry_callback(self, source, res):
         # the callbacks can process them)
         self.registry_watcher.reclaim()
 
+        if not self._hold:
+            self.release()
+
     def source_appeared(self, watcher, source):
-        print(source.get_display_name())
+        print("Discovered calendar: ", source.get_display_name())
+
+        self.hold()
         ECal.Client.connect(source, ECal.ClientSourceType.EVENTS, 10, None, self.ecal_client_connected, source)
 
         # ??? should be (self, source, res) but we get the client instead
     def ecal_client_connected(self, c, res, source):
+        self.release()
+
         try:
             client = ECal.Client.connect_finish(res)
             client.set_default_timezone(self.zone)
 
             calendar = CalendarInfo(source, client)
+            calendar.owner_color_signal_id = calendar.connect("color-changed", self.source_color_changed)
             self.calendars[source.get_uid()] = calendar
 
-            self.interface.set_property("has-calendars", True)
+            self.update_status()
 
             if self.current_month_start != 0 and self.current_month_end != 0:
                 self.create_view_for_calendar(calendar)
@@ -147,6 +175,9 @@ def ecal_client_connected(self, c, res, source):
             print("couldn't connect to source", e.message)
             return
 
+    def source_color_changed(self, calendar):
+        self.create_view_for_calendar(calendar)
+
     def source_disappeared(self, watcher, source):
         try:
             calendar = self.calendars[source.get_uid()]
@@ -158,10 +189,21 @@ def source_disappeared(self, watcher, source):
         calendar.destroy()
 
         del self.calendars[source.get_uid()]
-        if len(self.calendars) > 0:
-            return
 
-        self.interface.set_property("has-calendars", False)
+        self.update_status()
+
+    def update_status(self):
+        status = STATUS_NO_CALENDARS
+
+        enabled_sources = self.registry.list_enabled(EDataServer.SOURCE_EXTENSION_CALENDAR)
+        for source in enabled_sources:
+            if self.is_relevant_source(None, source):
+                status = STATUS_HAS_CALENDARS
+
+        self.interface.set_property("status", status)
+
+        if status == STATUS_NO_CALENDARS:
+            self.exit()
 
     def is_relevant_source(self, watcher, source):
         relevant = source.has_extension(EDataServer.SOURCE_EXTENSION_CALENDAR) and \
@@ -172,6 +214,9 @@ def handle_set_time_range(self, iface, inv, time_since, time_until, force_reload
         print("SET TIME: from %s to %s" % (GLib.DateTime.new_from_unix_local(time_since).format_iso8601(),
                             GLib.DateTime.new_from_unix_local(time_until).format_iso8601()))
 
+        self.hold()
+        self.release()
+
         if time_since == self.current_month_start and time_until == self.current_month_end:
             if not force_reload:
                 self.interface.complete_set_time_range(inv)
@@ -195,6 +240,8 @@ def handle_exit(self, iface, inv):
         self.interface.complete_exit(inv)
 
     def create_view_for_calendar(self, calendar):
+        self.hold()
+
         if calendar.view_cancellable != None:
             calendar.view_cancellable.cancel()
         calendar.view_cancellable = Gio.Cancellable()
@@ -215,6 +262,8 @@ def create_view_for_calendar(self, calendar):
         calendar.client.get_view(query, calendar.view_cancellable, self.got_calendar_view, calendar)
 
     def got_calendar_view(self, client, res, calendar):
+        self.release()
+
         if calendar.view_cancellable.is_cancelled():
             return
 
@@ -246,6 +295,8 @@ def handle_new_or_modified_objects(self, view, objects, calendar):
         if (calendar.view_cancellable.is_cancelled()):
             return
 
+        self.hold()
+
         events = []
 
         for ical_comp in objects:
@@ -303,6 +354,8 @@ def handle_new_or_modified_objects(self, view, objects, calendar):
         if len(events) > 0:
             self.emit_events_added_or_updated(calendar, events)
 
+        self.release()
+
     def recurrence_generated(self, ical_comp, instance_start, instance_end, calendar, cancellable):
         if calendar.view_cancellable.is_cancelled():
             return False
@@ -416,8 +469,9 @@ def handle_removed_objects(self, view, component_ids, calendar):
             self.interface.emit_events_removed(uids_string)
 
     def exit(self):
-        self.registry_watcher.disconnect(self.client_appeared_id)
-        self.registry_watcher.disconnect(self.client_disappeared_id)
+        if self.registry_watcher != None:
+            self.registry_watcher.disconnect(self.client_appeared_id)
+            self.registry_watcher.disconnect(self.client_disappeared_id)
 
         for uid in self.calendars.keys():
             self.calendars[uid].destroy()
@@ -427,11 +481,19 @@ def exit(self):
 def main():
     setproctitle("cinnamon-calendar-server")
 
-    server = CalendarServer()
+    # For debugging, this will keep the process alive instead of exiting after 10s
+    hold = False
+    if len(sys.argv) > 1 and sys.argv[1] == "hold":
+        print("idle exit disabled...")
+        hold = True
+
+    server = CalendarServer(hold)
     signal.signal(signal.SIGINT, lambda s, f: server.exit())
     signal.signal(signal.SIGTERM, lambda s, f: server.exit())
 
-    server.run(sys.argv)
+    # Only pass the first argument to the GApplication - or it will
+    # complain the IS_SERVICE flag doesn't support arguments.
+    server.run([sys.argv[0]])
     return 0
 
 if __name__ == "__main__":
diff --git a/files/usr/share/cinnamon/applets/calendar@cinnamon.org/applet.js b/files/usr/share/cinnamon/applets/calendar@cinnamon.org/applet.js
index 7e16d8e6fe..446e501f69 100644
--- a/files/usr/share/cinnamon/applets/calendar@cinnamon.org/applet.js
+++ b/files/usr/share/cinnamon/applets/calendar@cinnamon.org/applet.js
@@ -246,7 +246,6 @@ class CinnamonCalendarApplet extends Applet.TextApplet {
 
     _has_calendars_changed(em) {
         this.event_list.actor.visible = this.events_manager.is_active();
-        this.events_manager.select_date(this._calendar.getSelectedDate());
     }
 
     _updateClockAndDate() {
diff --git a/files/usr/share/cinnamon/applets/calendar@cinnamon.org/calendar.js b/files/usr/share/cinnamon/applets/calendar@cinnamon.org/calendar.js
index 0bc7481deb..bca2ba76dc 100644
--- a/files/usr/share/cinnamon/applets/calendar@cinnamon.org/calendar.js
+++ b/files/usr/share/cinnamon/applets/calendar@cinnamon.org/calendar.js
@@ -162,7 +162,7 @@ class Calendar {
         this.events_enabled = true;
         this.events_manager.connect("events-updated", this._events_updated.bind(this));
         this.events_manager.connect("events-manager-ready", this._update_events_enabled.bind(this));
-        this.events_manager.connect("calendars-changed", this._update_events_enabled.bind(this));
+        this.events_manager.connect("has-calendars-changed", this._update_events_enabled.bind(this));
 
         // Find the ordering for month/year in the calendar heading
 
@@ -219,6 +219,7 @@ class Calendar {
 
     _update_events_enabled(em) {
         this.events_enabled = this.events_manager.is_active()
+        this._queue_update();
     }
 
     _onSettingsChange(object, key, old_val, new_val) {
@@ -393,8 +394,6 @@ class Calendar {
     _update(forceReload) {
         let now = new Date();
 
-        this._update_events_enabled();
-
         this._monthLabel.text = this._selectedDate.toLocaleFormat('%OB').capitalize();
         this._yearLabel.text = this._selectedDate.toLocaleFormat('%Y');
 
diff --git a/files/usr/share/cinnamon/applets/calendar@cinnamon.org/eventView.js b/files/usr/share/cinnamon/applets/calendar@cinnamon.org/eventView.js
index 894b5c8eeb..7c74537a21 100644
--- a/files/usr/share/cinnamon/applets/calendar@cinnamon.org/eventView.js
+++ b/files/usr/share/cinnamon/applets/calendar@cinnamon.org/eventView.js
@@ -3,7 +3,6 @@
 const Clutter = imports.gi.Clutter;
 const Gio = imports.gi.Gio;
 const GLib = imports.gi.GLib;
-const Goa = imports.gi.Goa;
 const Lang = imports.lang;
 const St = imports.gi.St;
 const Signals = imports.signals;
@@ -19,6 +18,10 @@ const Util = imports.misc.util;
 const Mainloop = imports.mainloop;
 const Tweener = imports.ui.tweener;
 
+const STATUS_UNKNOWN = 0
+const STATUS_NO_CALENDARS = 1
+const STATUS_HAS_CALENDARS = 2
+
 // TODO: this is duplicated from applet.js
 const DATE_FORMAT_FULL = CinnamonDesktop.WallClock.lctime_format("cinnamon", "%A, %B %-e, %Y");
 
@@ -131,6 +134,7 @@ class EventDataList {
 
         if (existing !== undefined && event_data.equal(existing)) {
             existing.last_request_timestamp = last_request_timestamp;
+            existing.color = event_data.color;
             return false;
         }
 
@@ -235,13 +239,13 @@ class EventsManager {
         this.desktop_settings = desktop_settings;
         this._calendar_server = null;
         this.current_month_year = null;
-        this.current_selected_date = null;
+        this.current_selected_date = GLib.DateTime.new_from_unix_local(0);
 
         this.last_update_timestamp = 0;
         this.events_by_date = {};
 
         this._inited = false;
-        this._has_calendars = false;
+        this._cached_state = STATUS_UNKNOWN;
 
         this._gc_timer_id = 0;
 
@@ -263,40 +267,6 @@ class EventsManager {
                 this._calendar_server_ready.bind(this)
             );
         }
-
-        Goa.Client.new(null, this._goa_client_new_finished.bind(this));
-    }
-
-    _goa_client_new_finished(source, res) {
-        try {
-            this.goa_client = Goa.Client.new_finish(res);
-            this.goa_client.connect("account-added", this._update_goa_client_has_calendars.bind(this));
-            this.goa_client.connect("account-changed", this._update_goa_client_has_calendars.bind(this));
-            this.goa_client.connect("account-removed", this._update_goa_client_has_calendars.bind(this));
-        } catch (e) {
-            log("could not connect to calendar server process: " + e);
-        }
-    }
-
-    _update_goa_client_has_calendars(client, changed_objects) {
-        // goa can tell us if there are any accounts with enabled
-        // calendars. Asking our calendar server ("has-calenders")
-        // is useless since only certain actions activate it.
-
-        let objects = this.goa_client.get_accounts();
-        let any_calendars = false;
-
-        for (let obj of objects) {
-            let account = obj.get_account()
-            if (!account.calendar_disabled) {
-                any_calendars = true;
-            }
-        }
-
-        if (any_calendars !== this._has_calendars) {
-            this._has_calendars = any_calendars;
-            this.emit("has-calendars-changed");
-        }
     }
 
     _calendar_server_ready(obj, res) {
@@ -318,7 +288,11 @@ class EventsManager {
                 this._handle_client_disappeared.bind(this)
             );
 
-            this._update_goa_client_has_calendars(null, null);
+            this._calendar_server.connect(
+                "notify::status",
+                this._handle_status_notify.bind(this)
+            );
+
             this._inited = true;
 
             this.emit("events-manager-ready");
@@ -407,7 +381,28 @@ class EventsManager {
     }
 
     _handle_client_disappeared(server, uid) {
+        // A calendar was removed/disabled. Instead of picking
+        // specific matching events to remove, just rebuild the
+        // entire list.
+        this.events_by_date = {}
+        this.queue_reload_today(true);
+    }
+
+    _handle_status_notify(server, pspec) {
+        if (this._calendar_server.status === this._cached_state) {
+            return;
+        }
+
+        // Never reload when the new status is STATUS_UNKNOWN - this
+        // means the server name-owner disappeared, it doesn't mean
+        // there are no calendars.
+        if (this._calendar_server.status === STATUS_UNKNOWN) {
+            return;
+        }
+
+        this._cached_state = this._calendar_server.status;
         this.queue_reload_today(true);
+        this.emit("has-calendars-changed");
     }
 
     get_event_list() {
@@ -528,7 +523,10 @@ class EventsManager {
         return this._inited &&
                this.settings.getValue("show-events") &&
                this._calendar_server !== null &&
-               this._has_calendars;
+               // Not blocking STATUS_UNKNOWN allows our calendar to remain
+               // populated while the server is 'unowned' (sleeping), since
+               // its cached property is set to 0 when its current owner exits.
+               this._calendar_server.status !== STATUS_NO_CALENDARS;
     }
 }
 Signals.addSignalMethods(EventsManager.prototype);
diff --git a/src/org.cinnamon.CalendarServer.xml b/src/org.cinnamon.CalendarServer.xml
index c0f7364291..d389f8804e 100644
--- a/src/org.cinnamon.CalendarServer.xml
+++ b/src/org.cinnamon.CalendarServer.xml
@@ -24,6 +24,10 @@
     <!-- since, until are localized time_t -->
     <property name='Since' type='x' access='read'/>
     <property name='Until' type='x' access='read'/>
-    <property name='HasCalendars' type='b' access='read'/>
+    <!-- Status- enum:
+         0: unknown
+         1: no calendars
+         2: calendars -->
+    <property name='Status' type='u' access='read'/>
   </interface>
 </node>
\ No newline at end of file
